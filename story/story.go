package story

import (
	"fmt"
	"math/rand"
	"quizz/character"
)

func Wakeup(c character.Character) {
	items := ""
	if c.Bag.Matches {
		items += "–°—ñ—Ä–Ω–∏–∫–∏ "
	}
	if c.Bag.Torch {
		items += "–õ—ñ—Ö—Ç–∞—Ä–∏–∫ "
	}
	if c.Bag.Knife {
		items += "–ù—ñ–∂ "
	} else {
		items += "–ù—ñ—á–æ–≥–æ"
	}

	fmt.Printf("%s –ø—Ä–æ–∫–∏–Ω—É–≤—Å—è –±—ñ–ª—è –≤—Ö–æ–¥—É –≤ –ø–µ—á–µ—Ä—É. –í—ñ–Ω –ª–∏—à–µ –ø–∞–º º—è—Ç–∞—î —Å–≤–æ—î —ñ–º º—è. –ü–æ—Ä—è–¥ –∑ –Ω–∏–º —Ä—é–∫–∑–∞–∫, –≤ —è–∫–æ–º—É –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å: %s\n", c.Name, items)
	fmt.Println("---")

	fmt.Printf("–£ –ø–µ—á–µ—Ä—ñ —Ç–µ–º–Ω–æ, —Ç–æ–º—É %s —ñ–¥–µ —Å—Ç–µ–∂–∫–æ—é, —è–∫–∞ –≤–µ–¥–µ –≤—ñ–¥ –ø–µ—á–µ—Ä–∏ –≤ –ª—ñ—Å.\n", c.Name)

	fmt.Println("---")
}

func Meetanimal(c character.Character) {
	fmt.Printf("–£ –ª—ñ—Å—ñ %s –Ω–∞—Ç–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ –º–µ—Ä—Ç–≤–µ —Ç—ñ–ª–æ –¥–∏–≤–Ω–æ—ó —Ç–≤–∞—Ä–∏–Ω–∏. \n –©–æ —Ä–æ–±–∏—Ç–∏  –∑ —Ç–≤–∞—Ä–∏–Ω–æ—é‚ùì‚ùì‚ùì‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è  \n 1Ô∏è‚É£ –©–æ–± –æ–≥–ª—è–Ω—É—Ç–∏ —Ç–≤–∞—Ä–∏–Ω—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 1 –Ω–∞ –∫–ª–∞–≤—É–∞—Ç—É—Ä—ñ\n 2Ô∏è‚É£ –©–æ–± –ø—Ä–æ—Å—Ç–æ —É–π—Ç–∏ —Ç–∞ —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç–µ–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 2 \n 3Ô∏è‚É£ –©–æ–± —Ä–æ–∑–±—É–¥–∏—Ç–∏ —Ç–≤–∞—Ä–∏–Ω—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 3 \n 4Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å —è–∫—É —ñ–Ω—à—É –∫–ª–∞–≤—ñ—à—É —â–æ–± –¥–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—É –≤–∏—Ä—ñ—â–∏—Ç–∏ —â–æ —Ä–æ–±–∏—Ç–∏ \n", c.Name)
	var choice int

	fmt.Scanln(&choice)

	switch choice {
	case 1:
		fmt.Printf("%s –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ —Ç—ñ–ª–∞ —Ç–∞ –æ–≥–ª—è–¥–∞—î –π–æ–≥–æ. –í—ñ–Ω –ø–æ–º—ñ—á–∞—î –¥–∏–≤–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–∞ —à–∏—ó —Ç–≤–∞—Ä–∏–Ω–∏, –∞–ª–µ –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–º—ñ—á–∞—î.\n", c.Name)

	case 2:
		fmt.Printf("%s –æ–±—Ö–æ–¥–∏—Ç—å —Ç—ñ–ª–æ, —É–Ω–∏–∫–∞—é—á–∏ –∑–∞–π–≤–∏—Ö –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç–µ–π.\n", c.Name)
	case 3:
		fmt.Printf("%s —Å–ø—Ä–æ–±—É–≤–∞–≤ —Ä–æ–∑–¥—Ä–∞—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª–æ, –∞–ª–µ –≤–æ–Ω–æ –Ω—ñ –Ω–∞ —â–æ –Ω–µ —Ä–µ–∞–≥—É—î.\n", c.Name)
	default:

		choice := rand.Intn(3) + 1
		switch choice {
		case 1:
			fmt.Printf("%s –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ —Ç—ñ–ª–∞ —Ç–∞ –æ–≥–ª—è–¥–∞—î –π–æ–≥–æ. –í—ñ–Ω –ø–æ–º—ñ—á–∞—î –¥–∏–≤–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–∞ —à–∏—ó —Ç–≤–∞—Ä–∏–Ω–∏, –∞–ª–µ –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–º—ñ—á–∞—î.\n", c.Name)

		case 2:
			fmt.Printf("%s –æ–±—Ö–æ–¥–∏—Ç—å —Ç—ñ–ª–æ, —É–Ω–∏–∫–∞—é—á–∏ –∑–∞–π–≤–∏—Ö –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç–µ–π.\n", c.Name)
		case 3:
			fmt.Printf("%s —Å–ø—Ä–æ–±—É–≤–∞–≤ —Ä–æ–∑–¥—Ä–∞—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª–æ, –∞–ª–µ –≤–æ–Ω–æ –Ω—ñ –Ω–∞ —â–æ –Ω–µ —Ä–µ–∞–≥—É—î.\n", c.Name)

		}
	}

	fmt.Printf("–í—ñ–Ω –æ–±–∏—Ä–∞—î –Ω—ñ—á–æ–≥–æ –∑ —Ü–∏–º –Ω–µ —Ä–æ–±–∏—Ç–∏ –π —ñ—Ç–∏ –¥–∞–ª—ñ.\n")
	fmt.Println("---")
}

func Findbox(c character.Character) {
	fmt.Printf("–ß–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å %s –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–æ –±–µ–∑–ª—é–¥–Ω–æ–≥–æ —Ç–∞–±–æ—Ä—É. –í—ñ–Ω –≤–∂–µ –≤—Ç–æ–º–ª–µ–Ω–∏–π —ñ –≤–∏—Ä—ñ—à—É—î –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –∞ –Ω–µ –π—Ç–∏ –¥–∞–ª—ñ. –£ –Ω–∞–π–±–ª–∏–∂—á–æ–º—É –Ω–∞–º–µ—Ç—ñ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–µ–π—Ñ –∑ –∫–æ–¥–æ–≤–∏–º –∑–∞–º–∫–æ–º –∑ –æ–¥–Ω–Ω—î–π —Ü–∏—Ñ—Ä–∏.\n –í–≤–µ–¥—ñ—Ç—å 1 —Ü–∏—Ñ—Ä—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–µ–π—Ñ ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è \n", c.Name)

	for {
		var choice int
		_, err := fmt.Scanln(&choice)
		if err != nil {
			fmt.Println("–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä—É.")
			continue
		}

		var code = 5

		if choice != code {
			if choice > code {
				fmt.Println("–ö–æ–¥ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å. –°–ø—Ä–æ–±—É–π —â–µ. \n –ü—ñ–¥–∫–∞–∑–∫–∞: –∫–æ–¥ –º–µ–Ω—à–µ, –Ω—ñ–∂ —Ç–æ–π, —â–æ —Ç–∏ –≤–≤–æ–¥–∏—à")
				continue

			} else if choice < code {
				fmt.Println("–ö–æ–¥ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å. –°–ø—Ä–æ–±—É–π —â–µ. \n –ü—ñ–¥–∫–∞–∑–∫–∞: –∫–æ–¥ –±—ñ–ª—å—à–∏–π, –Ω—ñ–∂ —Ç–æ–π, —â–æ —Ç–∏ –≤–≤–æ–¥–∏—à")
				continue
			}
		}
		if choice == code {
			fmt.Println("–ö–æ–¥ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å. –°–µ–π—Ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
			break
		}

	}
	fmt.Printf("---\n")
	fmt.Printf("–í—ñ–Ω –¥–æ–±–∏—Ä–∞—î –∫–æ–¥, —ñ –∫–æ–ª–∏ —Å–µ–π—Ñ –≤—ñ–¥—á–∏–Ω—è—î—Ç—å—Å—è, –π–æ–º—É –Ω–∞ –¥–æ–ª–æ–Ω—é –≤–∏–ø–æ–≤–∑–∞—î –≤–µ–ª–∏–∫–∞ –∫–æ–º–∞—Ö–∞, –∫—É—Å–∞—î –π–æ–≥–æ –π —Ç—ñ–∫–∞—î. %s –Ω–µ–ø—Ä–∏—Ç–æ–º–Ω—ñ—î.\n –ê –≤—Å–µ –º–æ–≥–ª–æ –±—É—Ç–∏ –∑–æ–≤—Å—ñ–º —ñ–Ω–∞–∫—à–µ.\n üîö", c.Name)
}
